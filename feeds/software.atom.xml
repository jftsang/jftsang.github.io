<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>JMFT - Software</title><link href="https://jmft.dev/" rel="alternate"/><link href="https://jmft.dev/feeds/software.atom.xml" rel="self"/><id>https://jmft.dev/</id><updated>2025-09-26T00:00:00+01:00</updated><entry><title>Storing times, and precision of float64</title><link href="https://jmft.dev/time-precision-float64.html" rel="alternate"/><published>2025-09-26T00:00:00+01:00</published><updated>2025-09-26T00:00:00+01:00</updated><author><name>J. M. F. Tsang</name></author><id>tag:jmft.dev,2025-09-26:/time-precision-float64.html</id><summary type="html">&lt;p&gt;This is the second article about how working with temporal information in computer systems. &lt;a href="date-time-and-timezones"&gt;The first article&lt;/a&gt; was about contained some definitions about astronomical time and timezones.&lt;/p&gt;
&lt;p&gt;This article describes options for storing temporal values in your programs, and their limitations. In particular, it describes two pitfalls that can happen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the second article about how working with temporal information in computer systems. &lt;a href="date-time-and-timezones"&gt;The first article&lt;/a&gt; was about contained some definitions about astronomical time and timezones.&lt;/p&gt;
&lt;p&gt;This article describes options for storing temporal values in your programs, and their limitations. In particular, it describes two pitfalls that can happen when working with floating-point representations for times.&lt;/p&gt;
&lt;h2&gt;Numeric data types&lt;/h2&gt;
&lt;p&gt;Computers have a number of ways to represent numerical values, each with their uses. Two most important formats for us are &lt;code&gt;int64&lt;/code&gt; and &lt;code&gt;float64&lt;/code&gt;. Both use 64 bits (8 bytes) to store values. They are the most commonly used in modern systems for general-purpose computations in which memory is not at a premium, and are widely supported across major programming languages.&lt;/p&gt;
&lt;p&gt;Further notes on &lt;a href="https://en.wikipedia.org/wiki/Data_type#Numeric_types"&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Integers&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;int64&lt;/code&gt; uses a binary (base 2) representation to encode an integer value between &lt;code&gt;-2^32&lt;/code&gt; and &lt;code&gt;2^32 - 1&lt;/code&gt; inclusive – that is, between &lt;code&gt;-18446744073709551616&lt;/code&gt; and &lt;code&gt;18446744073709551615&lt;/code&gt;. Positive numbers (and zero) are stored in the obvious way, and negative numbers are usually encoded using &lt;a href="https://en.wikipedia.org/wiki/Two%27s_complement"&gt;two's complement&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Floating-point values&lt;/h3&gt;
&lt;p&gt;Fractional values are most commonly stored using a &lt;em&gt;floating-point representation&lt;/em&gt;. Numbers are represented in the &amp;quot;scientific&amp;quot; form&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = s * (1 + m) * 2**e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;em&gt;sign bit&lt;/em&gt; &lt;code&gt;s in {-1, 1}&lt;/code&gt; specifies the sign of the number;&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;mantissa&lt;/em&gt; &lt;code&gt;0 &amp;lt;= m &amp;lt; 1&lt;/code&gt; specifies the fractional part of the significand in base 2; and&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;exponent&lt;/em&gt; &lt;code&gt;e in range(-1022, 1024)&lt;/code&gt; is an integer that determines the scale of the number.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The mantissa is stored using 52 bits, the exponent with 11, so alongside the sign bit, that makes 64 bits in total. Details on &lt;a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format#IEEE_754_double-precision_binary_floating-point_format:_binary64"&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The term &lt;code&gt;1 + m&lt;/code&gt; is called the &lt;em&gt;significand&lt;/em&gt;, containing the significant figures of the number: this is a number in the interval &lt;code&gt;1 &amp;lt;= 1 + m &amp;lt; 2&lt;/code&gt;. &amp;quot;Floating point&amp;quot; refers to the fact that the decimal (binary?) point may be moved to different locations by modifying the exponent.&lt;/p&gt;
&lt;p&gt;This representation confers certain performance advantages: for example, to multiply two floats one simply multiples the two mantissae and adds the two exponents. Details about floating-point arithmetic on &lt;a href="https://en.wikipedia.org/wiki/Floating-point_arithmetic#Floating-point_operations"&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(The numbers that are represented in the form above are the so-called &amp;quot;normal numbers&amp;quot;. There are also a number of special values such as subnormal numbers, zeros, &lt;code&gt;inf&lt;/code&gt; and &lt;code&gt;nan&lt;/code&gt;, which I won't talk here; although &lt;code&gt;nan&lt;/code&gt; plays an important role in representing missing or unknown values.)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Precision limitations on floats&lt;/h2&gt;
&lt;p&gt;Details can be found on Wikipedia, but for us, the most important observations are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The exponent term &lt;code&gt;2**e&lt;/code&gt; allows both very large and very small numbers to be represented.&lt;/li&gt;
&lt;li&gt;The mantissa is stored using 52 bits, which means that the maximum precision of a floating-point number is 53 significant figures (in base 2) – the extra significant figure coming from the &lt;code&gt;1 + &lt;/code&gt; term.&lt;/li&gt;
&lt;li&gt;53 bits of significance corresponds to about 16 digits; so the maximum precision in decimals is about 16 digits. (Actually between 15 and 17 digits depending on the exact values of &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;e&lt;/code&gt;.)&lt;/li&gt;
&lt;li&gt;This relative precision is independent of &lt;code&gt;e&lt;/code&gt;. However, the absolute precision does depend on &lt;code&gt;e&lt;/code&gt; – the larger the number, the worse the absolute precision.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Traps with Unix time&lt;/h2&gt;
&lt;p&gt;%%The danger of using &lt;code&gt;float64&lt;/code&gt; for Unix time%%&lt;/p&gt;
&lt;p&gt;The fact that the number of significant figures is limited to about 16 digits&lt;/p&gt;
&lt;p&gt;%%Most systems offer two clocks. One is persistent, continuing to count
when the system is powered down: this allows the computer to give an
absolute time since some epoch. This is usually the Unix Epoch, or just
&lt;em&gt;Epoch&lt;/em&gt; (capitalized), defined as 00:00:00 midnight at 1 January 1970
UTC.%%&lt;/p&gt;
</content><category term="Software"/><category term="data"/><category term="math"/><category term="physics"/></entry><entry><title>Naming is power</title><link href="https://jmft.dev/naming-power.html" rel="alternate"/><published>2025-09-21T00:00:00+01:00</published><updated>2025-09-21T00:00:00+01:00</updated><author><name>J. M. F. Tsang</name></author><id>tag:jmft.dev,2025-09-21:/naming-power.html</id><summary type="html">&lt;p&gt;Many cultural and religious traditions place a lot of importance in
names, and hold that names have power. There is something magical about
them.&lt;/p&gt;
&lt;p&gt;In Classical Greek tradition, Hades was feared and his name was not
spoken. The Bible supposes that the name of God is to be used for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many cultural and religious traditions place a lot of importance in
names, and hold that names have power. There is something magical about
them.&lt;/p&gt;
&lt;p&gt;In Classical Greek tradition, Hades was feared and his name was not
spoken. The Bible supposes that the name of God is to be used for
swearing oaths, which &lt;a href="https://en.wikipedia.org/wiki/Thou_shalt_not_take_the_name_of_the_Lord_thy_God_in_vain"&gt;should not be done
lightly&lt;/a&gt;.
Islam recognises &lt;a href="https://en.wikipedia.org/wiki/Names_of_God_in_Islam"&gt;99 names for
God&lt;/a&gt;, each
describing an aspect. Or in folklore, take the story of
&lt;a href="https://en.wikipedia.org/wiki/Rumpelstiltskin"&gt;Rumplestiltskin&lt;/a&gt;, a
creature that is defeated only by discovering and speaking his name.
&lt;a href="https://en.wikipedia.org/wiki/Chinese_name"&gt;Chinese culture places plenty of importance on
names&lt;/a&gt;, with various
traditions and taboos around them. Individuals often have several names
depending on the context and their relationships with the users of each
name. &lt;a href="https://en.wikipedia.org/wiki/Names_of_Sun_Yat-sen"&gt;Sun Yat-sen was a particularly notable
example.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I like naming things. Names make it possible to refer to something. Good
names make it possible to refer to something unambiguously. Even better
names allow you to not only refer to something, but also to place it
within a bigger context.&lt;/p&gt;
&lt;p&gt;Naming things is a creative act, in both senses of the word &lt;em&gt;creative&lt;/em&gt;
— both that it requires creativity, and that giving something a
name is a fundamental step in the process of bringing something into
being.  It is often the first thing that new parents do for their
children, perhaps even before they are born.&lt;/p&gt;
&lt;p&gt;The Book of Genesis describes the power to name things as being
exclusively given to human beings:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So out of the ground the Lord God formed every animal of the field and
every bird of the air and brought them to the man to see what he would
call them, and whatever the man called every living creature, that was
its name. The man gave names to all cattle and to the birds of the air
and to every animal of the field [...]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;...alongside humanity's mastery over, and responsibility for, the world.&lt;/p&gt;
&lt;p&gt;Anyway, I recently had the pleasure of commissioning a number of new
computers for a new lab network, and as part of that, was tasked with
coming up with names for these machines. I don't know where I'm going
with this anecdote, I just enjoyed the episode and it was a fun exercise
that felt good.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.rfc-editor.org/rfc/rfc1178.html"&gt;RFC 1178&lt;/a&gt; has some
specific guidelines about how to choose a name your computer. Choosing
the right level of abstraction when naming something is important.&lt;/p&gt;
</content><category term="Software"/><category term="philosophy-and-religion"/></entry><entry><title>Why learners find classes and objects confusing</title><link href="https://jmft.dev/why-oop-is-confusing.html" rel="alternate"/><published>2025-08-05T00:00:00+01:00</published><updated>2025-08-05T00:00:00+01:00</updated><author><name>J. M. F. Tsang</name></author><id>tag:jmft.dev,2025-08-05:/why-oop-is-confusing.html</id><summary type="html">&lt;p&gt;One reason why Python is such a popular and powerful language is that it
is straightforward to learn and make good progress. Learners can quickly
become comfortable with many aspects of the language, such as control
flow and functions.&lt;/p&gt;
&lt;p&gt;The first obstacle that many learners come across is when they …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One reason why Python is such a popular and powerful language is that it
is straightforward to learn and make good progress. Learners can quickly
become comfortable with many aspects of the language, such as control
flow and functions.&lt;/p&gt;
&lt;p&gt;The first obstacle that many learners come across is when they come
across classes and objects. This is usually met as an intermediate
subject several chapters into a book, by which time they may already
have &lt;em&gt;used&lt;/em&gt; objects, if they have been using libraries such as pandas.&lt;/p&gt;
&lt;p&gt;Learners often find classes and objects difficult because introductory
courses usually introduce them using toy examples that do not motivate
their use: often the same effect can be achieved using dictionaries (for
fields) and functions (for methods). The true utility of classes comes
when working on a complex project where modularity and abstraction are
useful for simplifying problems.&lt;/p&gt;
&lt;h2&gt;Classes play several roles&lt;/h2&gt;
&lt;h3&gt;Grouping data&lt;/h3&gt;
&lt;p&gt;Classes and objects can be used to group related variables into a
&amp;quot;compound&amp;quot; object:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

joanna = Person(name=&amp;quot;Joanna&amp;quot;, age=32)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;dataclass&lt;/code&gt; feature (introduced in Python 3.7 and now standard)
provides a shortcut for constructing many such classes (&lt;em&gt;inter alia&lt;/em&gt;,
creating the &lt;code&gt;__init__&lt;/code&gt; method automatically):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;@dataclass
class Person:
    name: str
    age: int
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Grouping data:&lt;/strong&gt;
One advantage is that a single argument can be passed around between
functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# this
def describe(p: Person):
    print(f&amp;quot;{p.name} is {p.age} years old&amp;quot;)

describe(joanna)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is neater than:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# not this
def describe(name: str, age: int):
    print(f&amp;quot;{name} is {age} years old&amp;quot;)

describe(&amp;quot;Joanna&amp;quot;, 32)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we desire to start modelling new attributes of people and including
them when printing descriptions, we simply need to update the &lt;code&gt;Person&lt;/code&gt;
class and the &lt;em&gt;body&lt;/em&gt; of the &lt;code&gt;describe&lt;/code&gt; function, rather than the
&lt;em&gt;signature&lt;/em&gt; of the &lt;code&gt;describe&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alternative: a dictionary:&lt;/strong&gt;
A similar effect might be achieved by using a dictionary:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;joanna = {&amp;quot;name&amp;quot;: &amp;quot;Joanna&amp;quot;, &amp;quot;age&amp;quot;: 32}

def describe(p: dict):
    print(f&amp;quot;{p[&amp;quot;name&amp;quot;]} is {p[&amp;quot;age&amp;quot;]} years old&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;So what is a class?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Classes provide a means of bundling data and functionality together.
Creating a new class creates a new type of object, allowing new
instances of that type to be made. Each class instance can have
attributes attached to it for maintaining its state. Class instances
can also have methods (defined by its class) for modifying its state.
&lt;small&gt;&lt;a href="https://docs.python.org/3/tutorial/classes.html"&gt;&lt;em&gt;From the Python Tutorial on classes.&lt;/em&gt;&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, a class is a compound data type that contains multiple
fields or attributes &lt;small&gt;&lt;em&gt;(which are roughly synonymous, although
there is a slight difference in Python)&lt;/em&gt;&lt;/small&gt;, as well as associated
methods and functions.&lt;/p&gt;
&lt;h2&gt;An object &lt;em&gt;is&lt;/em&gt; what it &lt;em&gt;does&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;In &lt;a href="https://academic.oup.com/book/473"&gt;&lt;em&gt;Mathematics: A Very Short Introduction&lt;/em&gt;&lt;/a&gt;,
mathematician &lt;a href="https://www.dpmms.cam.ac.uk/~wtg10/"&gt;Timothy Gowers&lt;/a&gt; writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A mathematical object is what it &lt;em&gt;does&lt;/em&gt;. &lt;small&gt;&lt;em&gt;(p. 18)&lt;/em&gt;&lt;/small&gt; ...
If one learns to think abstractly, then many philosophical
difficulties disappear.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This comes in the context of discussions over the nature of mathematical
objects. Although philosophers have debated the 'intensive' properties
of mathematical objects (&lt;a href="https://en.wikipedia.org/wiki/Constructivism_(philosophy_of_mathematics)"&gt;'Do real numbers exist if you aren't able to
construct them?'&lt;/a&gt;)
and mathematicians have attempted to formalise concepts in terms of
logic and set theory (&lt;a href="https://en.wikipedia.org/wiki/Construction_of_the_real_numbers"&gt;'How do you define the real numbers in terms of
sets?'&lt;/a&gt;);
Gowers, like most other mathematicians, takes the more practical view
that most interesting questions about mathematical operations —
such as how to do arithmetic, solve equations and perform analytical
operations like taking limits — are about their 'extensive'
properties&lt;/p&gt;
&lt;h2&gt;Recommended reading&lt;/h2&gt;
&lt;p&gt;Baeldung's tutorial on &lt;a href="https://www.baeldung.com/java-oop"&gt;Object-Oriented-Programming Concepts in
Java&lt;/a&gt; is a good piece that introduces the ideas of
&lt;em&gt;abstraction&lt;/em&gt;, &lt;em&gt;encapsulation&lt;/em&gt;, &lt;em&gt;inheritance&lt;/em&gt; and &lt;em&gt;polymorphism&lt;/em&gt;. These
design principles apply just as much to Python programming. The syntax
in Java is a little different, but the examples there should be
reasonably comprehensible; see their article on &lt;a href="https://www.baeldung.com/java-classes-objects"&gt;Java Classes and
Objects&lt;/a&gt; for details.&lt;/p&gt;
&lt;!--
Allen Holub's article [Why getters and setters are evil][evil].
--&gt;
</content><category term="Software"/><category term="python"/><category term="object-oriented-programming"/><category term="teaching"/></entry><entry><title>Does vibecoding make coding more accessible?</title><link href="https://jmft.dev/vibecoding-accessible.html" rel="alternate"/><published>2025-04-27T00:00:00+01:00</published><updated>2025-04-27T00:00:00+01:00</updated><author><name>J. M. F. Tsang</name></author><id>tag:jmft.dev,2025-04-27:/vibecoding-accessible.html</id><summary type="html">&lt;p&gt;I was a volunteer and organiser for &lt;a href="https://codebar.io/"&gt;codebar&lt;/a&gt; for
several years and was heavily involved in outreach activities during my
time at Cambridge. In the face of cuts to DEI initiatives, I believe
that the lack of diversity at all levels of the tech sector seriously
harms the sector.&lt;/p&gt;
&lt;p&gt;Besides …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was a volunteer and organiser for &lt;a href="https://codebar.io/"&gt;codebar&lt;/a&gt; for
several years and was heavily involved in outreach activities during my
time at Cambridge. In the face of cuts to DEI initiatives, I believe
that the lack of diversity at all levels of the tech sector seriously
harms the sector.&lt;/p&gt;
&lt;p&gt;Besides the obvious lack of demographic diversity (I am the only woman
full-time employee software engineer in my department, out of 30 or so;
although there are a handful others of research and hardware engineers),
there is an over-valuation of people from computing and engineering
backgrounds, at the expense of people from other disciplines, especially
the social sciences and humanities, who have deep domain knowledge in
their own fields.  I am fortunate to work in a very interdisciplinary
team, where I've had the opportunity to learn about a variety of topics
in acoustics, audiology, music, image processing and data science;
besides topics in computing.&lt;/p&gt;
&lt;p&gt;At the risk of overgeneralising, software engineers lack this domain
knowledge. Instead, we maintain our value by holding a monopoly over our
skills, acting as middlemen between innovators and implementations.
As with all middlemen, while this situation is very lucrative for us, it
slows down the development process and often introduces
misunderstandings along the way.&lt;/p&gt;
&lt;p&gt;If &amp;quot;vibecoding&amp;quot; (&lt;a href="https://en.wikipedia.org/wiki/Vibe_coding"&gt;Wikipedia&lt;/a&gt;)
can indeed reduce the barrier for people from other disciplines to start
coding, that is not necessarily a bad thing.  Of course, many people are
using these new abilities to create &amp;quot;innovations&amp;quot; that are either
useless or actively harmful to society or the environment. But that is a
wider problem with an economic system that rewards such creations. Maybe
more on that in a future post.&lt;/p&gt;
&lt;p&gt;From an educational point of view, however, I don't think vibecoding can
be a substitute for becoming a well-rounded engineer.&lt;/p&gt;
&lt;p&gt;My experience using LLMs is that they are excellent for generating
prototypes and introducing one to a new technology or framework (or many
other topics); but they remain very poor at any higher-level tasks.
Vibecode does poorly with complex systems, and produces solutions that
do not scale well, do not handle edge cases, and have important flaws
such as security loopholes. And even code generation often produces
plenty of unnecessary code, or &amp;quot;cargo-cult programming&amp;quot;.  When I point
out these flaws in their solutions, they are usually able to adapt the
solutions to address those issues but often create new problems.&lt;/p&gt;
&lt;p&gt;I know about these considerations, through several years of experience
and experimentataion, sometimes painful (&lt;em&gt;e.g.&lt;/em&gt; accidentally dropping
entire databases or buckets). And there are many more considerations
that I do not know about, which is when I am very happy to have the
advice of more senior engineers.&lt;/p&gt;
&lt;p&gt;A novice programmer who relies on vibecoding may do a decent job
creating a prototype and may even become quite comfortable with a
programming language, but may find it difficult to grow beyond a small
project or generalise this knowledge. This isn't a new problem, though:
there are many courses, tutorials or bootcamps that equip students to
develop apps using frameworks, but do not teach the principles behind
the frameworks, leading to aforementioned cargo-cult programming.  This
is an all-too-common antipattern in science education: Timothy Gowers
describes &lt;a href="https://gowers.wordpress.com/2012/11/20/what-maths-a-level-doesnt-necessarily-give-you/"&gt;shortcomings of high school mathematics
education&lt;/a&gt;,
which bombards students with techniques and facts but does not introduce
any rigor or foundations, producing students who pass exams but do not
understand why.&lt;/p&gt;
&lt;p&gt;So perhaps there is still a place for us software engineers. But we must
do better than being code monkeys: in particular, we must adopt an
attitude towards engineering that focuses on systems and thinks at a
higher level, about business requirements.&lt;/p&gt;
</content><category term="Software"/><category term="software-engineering"/><category term="politics"/><category term="teaching"/></entry><entry><title>Category theoretic ideas in data engineering systems design</title><link href="https://jmft.dev/category-theory-and-data-engineering.html" rel="alternate"/><published>2024-09-22T00:00:00+01:00</published><updated>2024-09-22T00:00:00+01:00</updated><author><name>J. M. F. Tsang</name></author><id>tag:jmft.dev,2024-09-22:/category-theory-and-data-engineering.html</id><summary type="html">&lt;p&gt;I have been reading – at a very shallow level – about category theory
(&lt;a href="https://en.wikipedia.org/wiki/Category_theory"&gt;wiki&lt;/a&gt;), and thinking
about its applicability to software and system design for data
engineering. This post is a loose collection of thoughts on the subject,
and a manifesto for employing a more rigorous language when building
such systems …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been reading – at a very shallow level – about category theory
(&lt;a href="https://en.wikipedia.org/wiki/Category_theory"&gt;wiki&lt;/a&gt;), and thinking
about its applicability to software and system design for data
engineering. This post is a loose collection of thoughts on the subject,
and a manifesto for employing a more rigorous language when building
such systems.&lt;/p&gt;
&lt;p&gt;Although category theory is regarded as a very abstract area of maths –
it generalises concrete concepts from other fields, such as algebra and
topology, into a common language – it has some practical applications.
In maths, it has been used to discover &amp;quot;structure-preserving&amp;quot;
correspondences between these different areas, and, for example, can be
used to produce a proof of a result in analysis or topology by showing
that that theorem is equivalent to a simpler statement in algebra.&lt;/p&gt;
&lt;p&gt;More recently, ideas from category theory have made their way into
programming and software engineering: higher-order functions (hofs) like
&lt;code&gt;map&lt;/code&gt; and monadic patterns like &lt;code&gt;Maybe&lt;/code&gt; (a.k.a. &lt;code&gt;Optional&lt;/code&gt;, &lt;code&gt;Option&lt;/code&gt;)
were once the marks of purely functional languages like Haskell, but
have found their way into mainstream languages and are now routinely
used by developers... even if they don't know that that's what they're
doing.&lt;/p&gt;
&lt;p&gt;For a systematic introduction to category theory, consult &lt;a href="https://www.julia-goedecke.de/pdf/CategoryTheoryNotes.pdf"&gt;Julia
Goedecke's lecture
notes&lt;/a&gt; or
Emily Rhiel's &lt;em&gt;Category Theory in Context&lt;/em&gt;
(&lt;a href="https://math.jhu.edu/~eriehl/"&gt;web&lt;/a&gt;)
(&lt;a href="https://emilyriehl.github.io/files/context.pdf"&gt;pdf&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I am neither a category theorist nor a computer scientist, so please
excuse the inaccuracies in that which follows – or better yet, &lt;a href="mailto:j_dot_m_dot_f_dot_tsang_at_cantab_dot_net"&gt;send me
corrections&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a id="motivation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Information flow&lt;/h2&gt;
&lt;p&gt;The fundamental problem of data engineering is that:&lt;/p&gt;
&lt;div style="width:100%; display: flex; justify-content: center; margin-top: 1.5rem; margin-bottom: 1.5rem;"&gt;
&lt;div&gt;
The way that data is ingested&lt;br&gt;
is not the way that data is stored.&lt;br&gt;
The way that data is stored&lt;br&gt;
is not the way that data is exported.
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;More prosaically, the purpose of data engineering – and perhaps of all
software engineering – is the transmission and transformation of
information, from &amp;quot;sources&amp;quot; (e.g. lab collections) to &amp;quot;sinks&amp;quot; (e.g.
reports, dashboards). The particulars of the transformations depend
strongly on the nature of the data and the desired output, but they can
be broken into individual operations that can be placed into one of
three classes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Transforming the data into another, informationally equivalent, format.&lt;/li&gt;
&lt;li&gt;Enriching the data with additional information.&lt;/li&gt;
&lt;li&gt;Discarding irrelevant information from the data.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JSON serialization or deserialization of an object:
&lt;code&gt;Employee.serialize: Employee -&amp;gt; Dict[str, Any]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Querying a database for information about a given ID:
&lt;code&gt;Employee.find_by_id: int -&amp;gt; Employee&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Calculating the mean, or other aggregate statistic, of a collection
of data: &lt;code&gt;Collection[float] -&amp;gt; float&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Data pipelines – compositions of transformations – are usually
represented as directed acyclic graphs
(&lt;a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph"&gt;wiki&lt;/a&gt;), with
nodes representing transformations and arrows representing data flow;
beginning with &amp;quot;source nodes&amp;quot; that represent the input data.  This DAG
representation focuses on the operations and the order in which they are
performed.&lt;/p&gt;
&lt;p&gt;An alternative representation is to focus on the &lt;em&gt;format&lt;/em&gt;, or &lt;em&gt;type&lt;/em&gt; of
data as it progresses through a pipeline. Let these types form the nodes
of a graph; the transformations between types are now arrows. (The
resulting graph is still directed but not necessarily acyclic.)&lt;/p&gt;
&lt;p&gt;Under this formats-first picture, it is much easier to consider &lt;em&gt;all
possible transformations&lt;/em&gt; that can be applied to obtain one data type
from another, rather than only those that are actually used within a
particular pipeline. Draw the arrows and choose the appropriate paths.&lt;/p&gt;
&lt;p&gt;Moreover, it encourages a style in which arrows are by default &amp;quot;pure
functions&amp;quot;, making the system's behaviour easier to understand.
Operations such as insertions, updates, deletions, or writing to an
external resource may be managed using monads&lt;small&gt;... which I would
explain if only I understood them... but instead I refer you to &lt;a href="https://github.com/dbrattli/OSlash/wiki/Functors,-Applicatives,-And-Monads-In-Pictures#monads"&gt;Dag
Brattli's tutorial about functional programming in
Python&lt;/a&gt;&lt;/small&gt;.&lt;/p&gt;
&lt;p&gt;But there are more practical benefits in a system design methodology
that focuses on data formats and transformations. At a tactical level, a
well-hinted, strongly-typed codebase is easier to analyze and refactor
as a static type checker such as mypy or pyre can look for
inconsistencies across the codebase. At a systems level, we can be more
confident that data, no matter how it is transformed, possibly by many
components or over a distributed system, is always in one of a small
number of formats, ensuring interoperability and substitutability
between components.&lt;/p&gt;
&lt;p&gt;Defocusing from the implementation details of any particular arrow,
prescribing only its inputs and outputs, also brings several advantages.
The most practical is that it enforces a &amp;quot;behaviour-driven design&amp;quot;.  The
developers responsible for the implementation details need only worry
that their behaviour conforms to this specification, allowing them to
work independently.&lt;/p&gt;
&lt;h2&gt;An example&lt;/h2&gt;
&lt;p&gt;Audio data can be in any of several formats, but essentially they all
consist of a stream of numbers that prescribe the waveform of the audio
(essentially, &lt;code&gt;List[float]&lt;/code&gt;, but the data may be stored in a compressed
form). Individual formats (such as MP3) may additionally contain
additional metadata, such as key-value tags (&lt;code&gt;Mapping[str, str]&lt;/code&gt;), but
these are ignored by operations on the audio.&lt;/p&gt;
&lt;p&gt;In this example we have &amp;quot;concrete types&amp;quot; &lt;code&gt;WAV&lt;/code&gt; and &lt;code&gt;MP3&lt;/code&gt; that contain
the information of an abstract type &lt;code&gt;Waveform&lt;/code&gt; (which is isomorphic to
&lt;code&gt;List[float]&lt;/code&gt;).  An &amp;quot;audio format&amp;quot; might be defined to be a type that
has a &lt;code&gt;toWaveform&lt;/code&gt; methodm, or in other words a &amp;quot;projection map&amp;quot;. The
projection map &lt;code&gt;WAV -&amp;gt; Waveform&lt;/code&gt; is particularly simple: &amp;quot;read the bytes
of the WAV file&amp;quot;; whereas the projection &lt;code&gt;MP3 -&amp;gt; Waveform&lt;/code&gt; is something
like &amp;quot;decompress the file&amp;quot;.&lt;/p&gt;
&lt;p&gt;The type &lt;code&gt;MP3&lt;/code&gt; may be regarded as a pair &lt;code&gt;(Waveform, Mapping[str, str])&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;My (short) experience of the data engineering world has been that much
focus is given to the details of particular frameworks and technologies.
These are important for building scalable systems, but this
specialisation risks losing the big picture. This &amp;quot;discipline&amp;quot; should
develop a more abstract language in order to produce reusable,
generalisable solutions to common problems.&lt;/p&gt;
&lt;p&gt;Not having such a language leads to becoming tightly coupled to a
particular framework or cloud provider, reducing interoperability. This
has real economic implications: vendor lock-in is a serious issue for
cloud services customers, and a reason for the growth of oligopolies,
reducing quality for all.&lt;/p&gt;
&lt;p&gt;Maths, and particularly category theory, might help to provide such a
language. Thinking about data engineering as the manipulation and
transformation of information through a pipeline, there are very natural
meanings to terms like &lt;em&gt;homomorphism&lt;/em&gt; (&amp;quot;information-preserving&amp;quot;) and
&lt;em&gt;quotient&lt;/em&gt; (&amp;quot;information-discarding&amp;quot;).&lt;/p&gt;
&lt;p&gt;I don't have the theoretical background to make these definitions
rigorous and to develop a &amp;quot;general algebra of data engineering&amp;quot;, but
it's a good start to look out for these patterns.&lt;/p&gt;
</content><category term="Software"/><category term="data"/><category term="math"/><category term="software-engineering"/></entry><entry><title>On regulation in software engineering</title><link href="https://jmft.dev/on-regulation-in-software-engineering.html" rel="alternate"/><published>2024-07-21T00:00:00+01:00</published><updated>2024-07-21T00:00:00+01:00</updated><author><name>J. M. F. Tsang</name></author><id>tag:jmft.dev,2024-07-21:/on-regulation-in-software-engineering.html</id><summary type="html">&lt;p&gt;Emergency services, GPs, hospitals, transportation systems and the like
are funded, at least in part, by public money. When their computer
systems go down, the public is badly affected and people can get hurt,
and lives can be put at risk. So what regulations and quality controls
are there on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Emergency services, GPs, hospitals, transportation systems and the like
are funded, at least in part, by public money. When their computer
systems go down, the public is badly affected and people can get hurt,
and lives can be put at risk. So what regulations and quality controls
are there on companies that provide these software services?&lt;/p&gt;
&lt;p&gt;For disclosure: I do not provide, and have not ever provided, such
services to any public sector organization. But if I were negligent and
my software caused damage to expensive lab equipment, I might, quite
rightly, receive disciplinary or at least remedial action from my
employer. And if somebody got hurt, there might be criminal
consequences. And that might be sufficient incentive to the individual
engineer within a smallish organisation, but it doesn't affect the
fundamental problem that the software engineering 'discipline' is,
generally speaking, not particularly disciplined when it comes to
quality control, testing, documentation and other best practices.&lt;/p&gt;
&lt;p&gt;Modern computer systems are very complex, so it is natural that issues
arise, but the same can be said for other areas of engineering which are
better regulated. Many software engineers (myself included) are
self-taught and have no qualification or formal training -- only the
good fortune to have worked with, and learnt from, excellent colleagues.
This is not a bad thing, as it makes the field accessible and allows
talent to join the industry, but without oversight, it allows bad
practices to proliferate.&lt;/p&gt;
&lt;p&gt;I can't comment on the particulars of &lt;a href="https://en.wikipedia.org/wiki/2024_CrowdStrike_incident"&gt;the latest
outage&lt;/a&gt; because
I don't know what happened, although it is good to know that
&lt;a href="https://www.crowdstrike.com/blog/falcon-update-for-windows-hosts-technical-details/"&gt;CrowdStrike are already performing a root cause
analysis&lt;/a&gt;
(&lt;a href="https://web.archive.org/web/20240720170853/https://www.crowdstrike.com/blog/falcon-update-for-windows-hosts-technical-details/"&gt;archive&lt;/a&gt;)
on the incident. But with an outage of this scale that affects so many
sectors, there does need to be some accountability to the public, and
'we fired the individual who wrote that code' and 'our stock price
crashed' aren't enough to change the broader culture in the discipline
and prevent similar outages from happening again at some other company.&lt;/p&gt;
&lt;p&gt;Regulations must not become mere box-ticking exercises, but if
implemented effectively, they make service providers accountable to
taxpayer. But they are good for engineers too. They force us to think
about engineering quality. &lt;em&gt;Things that we know we should be doing&lt;/em&gt; but
often neglect, either because (a) we have tight deadlines or (b) they
are boring. We don't like to admit this, but this is often a reason for
poor documentation. But they should really be factored in the cost of
software development.  For all its flaws, GDPR was a step in the
right(ish) direction; companies and engineers have been made to consider
the consequences of their work pertaining to data handling.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post is motivated by the ongoing CrowdStrike outage, but pertains
to software engineering in general, not to the particulars of this
incident. As with all other content on this blog, it expresses my
opinions, not those of my employer.&lt;/em&gt;&lt;/p&gt;
</content><category term="Software"/><category term="software-engineering"/><category term="politics"/></entry><entry><title>In Praise of Visualization</title><link href="https://jmft.dev/in-praise-of-visualization.html" rel="alternate"/><published>2024-05-11T00:00:00+01:00</published><updated>2024-05-11T00:00:00+01:00</updated><author><name>J. M. F. Tsang</name></author><id>tag:jmft.dev,2024-05-11:/in-praise-of-visualization.html</id><summary type="html">&lt;p&gt;A little investment into building a GUI for live visualizations and
control provides huge improvements in iteration speed.&lt;/p&gt;
&lt;p&gt;I recently came across the excellent video &lt;a href="https://www.youtube.com/watch?v=rSKMYc1CQHE"&gt;Coding Adventure: Simulating Fluids&lt;/a&gt;
wonderfully explained by &lt;a href="https://github.com/SebLague"&gt;Sebastian Lague&lt;/a&gt;.
The video walks through the steps to build a simple smoothed particle
hydrodynamics simulation from nothing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A little investment into building a GUI for live visualizations and
control provides huge improvements in iteration speed.&lt;/p&gt;
&lt;p&gt;I recently came across the excellent video &lt;a href="https://www.youtube.com/watch?v=rSKMYc1CQHE"&gt;Coding Adventure: Simulating Fluids&lt;/a&gt;
wonderfully explained by &lt;a href="https://github.com/SebLague"&gt;Sebastian Lague&lt;/a&gt;.
The video walks through the steps to build a simple smoothed particle
hydrodynamics simulation from nothing, in C#.&lt;/p&gt;
&lt;p&gt;It brings back some sweet memories to my days as a research student
doing discrete particle model simulations using &lt;a href="https://www.mercurydpm.org/"&gt;MercuryDPM&lt;/a&gt;
and there are many practical lessons that I wish I had known when I
first started. The one that stuck out the most was actually one that
Lague glossed over: the power of visualisation and the massive returns
that even a simple user interface gives.&lt;/p&gt;
&lt;p&gt;The most dull and most frustrating aspect of my computational work was
undoubtedly the parameter studies to tune parameters such as time step
or particle stiffness. Poorly-chosen values do not &lt;em&gt;immediately&lt;/em&gt;
cause problems; your simulation will crank along seemingly fine for
several minutes before blowing up, or having &lt;code&gt;nan&lt;/code&gt;s everywhere).&lt;/p&gt;
&lt;p&gt;I didn't have a good visualization system at the time (MercuryDPM does
provide options for loading results into visualization software, but it
isn't live) and this hugely slowed down my iteration cycles. Neither did
I have a GUI for modifying parameters. So, my iterations were
rate-limited by my ability to load files into gnuplot or investigate
them manually.&lt;/p&gt;
&lt;p&gt;I'm now mostly not working on simulations, instead working almost
full-time in data engineering. The lesson around visualization is the
same, though: even a simple GUI can give a lot of insight and control
over what is otherwise a black box system, allowing faster iterations.&lt;/p&gt;
&lt;p&gt;Visualization systems, like other pieces of &amp;quot;infrastructure&amp;quot; such as
testing frameworks, do not &lt;em&gt;per se&lt;/em&gt; produce results, and so are often
overlooked or disincentivised in environments that prioritize rolling
out a product or result (proverbially, &amp;quot;moving fast and breaking
things&amp;quot;), especially research environments. I have been guilty of this
myself, but Sebastian's video clearly demonstrates that introducing even
a small amount of interactivity can be very powerful when guiding one
towards building reliable software and choosing sensible parameters. I
wish I had been a stronger advocate of this as a junior researcher or
engineer.&lt;/p&gt;
&lt;p&gt;Perhaps building a GUI is easiest in a language like C# or JavaScript.
&lt;small&gt;(I have no experience with the former.)&lt;/small&gt; I have yet to
find a GUI framework in Python that isn't either overly restrictive or
horribly low-level. Jupyter notebooks offer some hope in this area, but
I might look into PyGame.&lt;/p&gt;
</content><category term="Software"/><category term="simulation"/><category term="physics"/><category term="project-management"/></entry><entry><title>Communicating with the past and the future</title><link href="https://jmft.dev/communicating-with-the-past-and-the-future.html" rel="alternate"/><published>2024-05-10T00:00:00+01:00</published><updated>2024-05-10T00:00:00+01:00</updated><author><name>J. M. F. Tsang</name></author><id>tag:jmft.dev,2024-05-10:/communicating-with-the-past-and-the-future.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Originally written May 2022.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In his dialogue &lt;em&gt;Phaedrus&lt;/em&gt;, Plato has unflattering things to say about
the development of writing, arguing among other things that it weakens
the memory:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And so it is that you by reason of your tender regard for the writing
that is your offspring have declared …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Originally written May 2022.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In his dialogue &lt;em&gt;Phaedrus&lt;/em&gt;, Plato has unflattering things to say about
the development of writing, arguing among other things that it weakens
the memory:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And so it is that you by reason of your tender regard for the writing
that is your offspring have declared the very opposite of its true
effect. If men learn this, it will implant forgetfulness in their
souls. They will cease to exercise memory because they rely on that
which is written, calling things to remembrance no longer from within
themselves, but by means of external marks.&lt;/p&gt;
&lt;p&gt;What you have discovered is a recipe not for memory, but for reminder.
And it is no true wisdom that you offer your disciples, but only the
semblance of wisdom, for by telling them of many things without
teaching them you will make them seem to know much while for the most
part they know nothing. And as men filled not with wisdom but with the
conceit of wisdom they will be a burden to their fellows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What might have been applicable to the classical philosophers, however,
is not applicable to a modern society. (What does that say about us?) In
our world there is a tendency to regard the oral tradition as a remnant
of an ancient time, preserved only in 'primitive' cultures (&lt;em&gt;yikes&lt;/em&gt;) or
among the illiterate – but it is much more prevalent than we care to
admit. In many organizations, knowledge and know-how are often held by a
single 'elder' or 'wise person', spread informally by the coffee machine
or over the shoulder in a pair programming session. For good reason:
this is usually the fastest and most direct way to communicate with
someone, as well as the warmest and the most interactive; whereas
writing complete documentation takes time and is usually not as fun.&lt;/p&gt;
&lt;p&gt;However, this word-of-mouth approach soon becomes unsustainable as an
organization gets larger and older, and its collective memory fades:
individuals leave, or develop other interests or priorities, and those
who remain simply cannot be expected to remember the details of projects
long past. They may have taken care to document at the time, but this
information might be on a lost hard drive, or buried deep inside a
filing cabinet.&lt;/p&gt;
&lt;p&gt;This amnesia costs the organization time and money, and severely
undermines its operations. For scientific computing, data engineering
and machine learning, this means results become irreproducible,
experience is lost, and the providence of data becomes forgotten -
possibly leading to the use of flawed data, or of data that has legal or
ethical restrictions.&lt;/p&gt;
&lt;p&gt;As software engineers, one of the first things we learn is the value of
comments, especially well-written API documentation (docstrings); we are
also quickly introduced to version control systems such as Git, and
issue trackers (GitHub Issues, Bugzilla, Jira, &lt;em&gt;etc.&lt;/em&gt;).  Writing useful
comments and docs, commit messages, user stories and bug reports is an
art that takes time to learn, but one that software engineers spend
plenty of time practising. Writing docstrings is a largely mechanical
process that IDEs can automate, and user stories usually follow a
prescribed format ('As..., so that..., I want...').&lt;/p&gt;
&lt;p&gt;However, knowledge and documentation of project-level information,
as well as operational practices, are much more unstructured and require
more creativity. I include such things as data collection or generation,
data processing steps, results and status reports; as well as 'savvy
know-how', such as shell commands (magic spells) that do not necessarily
fit into a version control system (for example, if they are too
specialized for a particular application). This sort of writing is a key
skill for the natural or social scientist, but overlooked by software
engineers.&lt;/p&gt;
&lt;p&gt;For this sort of information, many organizations have therefore adopted
the use of a 'knowledge base' system, and wiki-style systems such as
Confluence or MediaWiki have become extremely popular (each with its
downsides and limitations). But a poorly-maintained knowledge base soon
becomes a swamp, impossible to search or read. Readers give up and go
back to the oral tradition.&lt;/p&gt;
&lt;p&gt;In what follows, I propose some techniques and best practices for using
these tools effectively.&lt;/p&gt;
&lt;p&gt;Some context about myself: I'm a software engineer of about three years;
my day job title is 'Senior Data Engineer', meaning I spend a lot of
time thinking about data pipelines and processes.  We use the Atlassian
products (Jira, Confluence) at work, and Slack as the primary means of
live communication.  I moved into the world of software engineering from
a stint in academia; my research background was in mathematical and
computational physics.  I'm a longtime Wikipedia reader and sometime
Wikipedia contributor, and spent too much time reading the Wikipedia
policies and &lt;a href="https://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style"&gt;manual of style&lt;/a&gt;.
Some of the following is a condensation of the Wikipedia MoS.&lt;/p&gt;
&lt;h2&gt;General principles&lt;/h2&gt;
&lt;h3&gt;The Golden Rule&lt;/h3&gt;
&lt;p&gt;Ignore all rules.&lt;/p&gt;
&lt;p&gt;This is an &lt;a href="https://en.wikipedia.org/wiki/Wikipedia:Ignore_all_rules"&gt;official policy of Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a rule prevents you from improving or maintaining Wikipedia, ignore
it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These are &lt;em&gt;proposals&lt;/em&gt;, not rules. They reflect &lt;em&gt;my&lt;/em&gt; opinions, shaped by
my background and experience. Your mileage may vary.&lt;/p&gt;
&lt;h3&gt;Prefer open channels&lt;/h3&gt;
&lt;p&gt;Communications in the open (Slack, Discord, IRC, mailing lists, Usenet,
forums, &lt;em&gt;etc.&lt;/em&gt;) allow passers-by to chip in with their knowledge and
advice. Hopefully, yours is a culture where this is welcome.  They also
maintain an org-wide (or even globally) accessible archive of the
communications, in case the participants eventually leave.&lt;/p&gt;
&lt;p&gt;This is especially important in the age of online working, when
coworkers are no longer to simply join a conversation that they
overhear.&lt;/p&gt;
&lt;p&gt;On the other hand, emails are more difficult to search, and depending on
the email provider may be ephemeral. They are closed to the participants
of an email thread.&lt;/p&gt;
&lt;p&gt;This must &lt;em&gt;never&lt;/em&gt; trump respect for the privacy of others.&lt;/p&gt;
&lt;h2&gt;Using knowledge bases&lt;/h2&gt;
&lt;h3&gt;Is it the right tool?&lt;/h3&gt;
&lt;p&gt;A knowledge base should aspire to be the 'single point of truth' that
future readers can refer to. Its contents and style should therefore be
timeless, and impersonally or objectively written. While an article
might describe the current state of play for an ongoing project, it
should identify this as a snapshot taken at a certain time. Likewise, it
may express the opinions of individuals (usually the author), but these
should be identified as opinions.&lt;/p&gt;
&lt;p&gt;(Whether the author of a page has the authority to establish her writing
as 'the truth' is a separate question, but in any case the author should
be clear to mark her opinions as such.)&lt;/p&gt;
&lt;p&gt;For dynamic information following the progress of a project, an issue
tracker such as Jira is usually more appropriate.&lt;/p&gt;
&lt;h3&gt;Crosslinking&lt;/h3&gt;
&lt;p&gt;A primary feature of wiki systems such as Confluence and MediaWiki –
indeed, the draw of the WWW in the first place – is the ability to link
between pages. This should be taken advantage of as much as possible.&lt;/p&gt;
&lt;p&gt;Where links fit well into the main text, they should be used. Where
possible, the link text should not significantly differ from the title
of the page being linked to. Nobody googles for 'click here'.&lt;/p&gt;
&lt;p&gt;On Wikipedia, the 'See also' section at the bottom of articles is a
place for linking to related articles that do not fit into the main
text. The &lt;a href="https://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style/Layout#%22See_also%22_section"&gt;Manual of Style&lt;/a&gt;
has guidelines of what should be included in such a section.&lt;/p&gt;
&lt;p&gt;Crosslinking is not restricted to pages within a wiki.  Confluence has
good support for linking to Jira tickets, and &lt;em&gt;vice versa&lt;/em&gt;. Jira has the
concept of linking tickets to one another.  Maintaining these links
makes it much easier for a user to find related information from one
page.&lt;/p&gt;
&lt;p&gt;Backlinking can be useful. MediaWiki offers a search for pages that link
to a specific article (example:
&lt;a href="https://en.wikipedia.org/wiki/Special:WhatLinksHere/Coffee"&gt;https://en.wikipedia.org/wiki/Special:WhatLinksHere/Coffee&lt;/a&gt;),
but backlinking needs to be done manually in Confluence.&lt;/p&gt;
&lt;h3&gt;Permalinking&lt;/h3&gt;
&lt;p&gt;Web resources are fickle. External websites may change their layouts
without properly redirecting; or change the contents of pages without
notice.&lt;/p&gt;
&lt;p&gt;To avoid &lt;a href="https://en.wikipedia.org/wiki/Link_rot"&gt;link rot&lt;/a&gt;, consider
linking to an archived version of a webpage using the &lt;a href="https://web.archive.org/"&gt;Wayback
Machine&lt;/a&gt;, rather than directly linking to the
URL.&lt;/p&gt;
&lt;p&gt;Most academic publications have a DOI
(&lt;a href="https://en.wikipedia.org/wiki/Digital_object_identifier"&gt;Wikipedia&lt;/a&gt;)
which uniquely identifies the publication. The DOI link (example:
&lt;a href="https://doi.org/10.1017/jfm.2018.2"&gt;https://doi.org/10.1017/jfm.2018.2&lt;/a&gt;)
is succinct and will redirect to the page for the journal article, even
if the journal website changes its layout and breaks a URL. Many
bibliography management software are able to automatically extract
information about an article, such as title, author, journal and year,
from a DOI.&lt;/p&gt;
&lt;p&gt;Websites such as Wikipedia and Stack Overflow, where information is
mutable by design, have 'permalinks' that allow a link to a specific
version of the content (example:
&lt;a href="https://stackoverflow.com/a/7969052/"&gt;https://stackoverflow.com/a/7969052/&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;Dating&lt;/h3&gt;
&lt;p&gt;Statements written in the present tense or using relative time
references soon become obsolete. They should be tagged with the date
on which the statement was made or last checked:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our progress is hindered by the availability of the lab, which is
currently being repaired after recent explosions &lt;em&gt;(2022-05-16)&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;or with an issue tracker reference:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are blocked until we fix the tests in MagicSoftware (MT-1337).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;provided that the ticket MT-1337 contains relevant information.&lt;/p&gt;
&lt;p&gt;This can be sidestepped by referring to version numbers:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As of v1.5, TheBestIDE is incapable of detecting unmatched brackets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Page notices&lt;/h3&gt;
&lt;p&gt;Page notices go at the top of the page and should indicate the
maintenance state of the page. They should usually include a date.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This page is work in progress. &lt;em&gt;(2022-05-16)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This page was last updated for DeepMagic v3.6.3. &lt;em&gt;(2022-05-16)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The information on this page is obsolete. Please refer instead to
&lt;strong&gt;This Other Page&lt;/strong&gt;. &lt;em&gt;(2022-05-16)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Page notices should usually be concerned with the page itself, not with
the thing being described in the page. A page on MagicSoftware should
not have a notice like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;~~MagicSoftware is obsolete. &lt;em&gt;(2022-05-16)&lt;/em&gt;~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That should instead be given in the main text – preferably with links to
relevant issue trackers. However, the following may be appropriate:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This page describes a project in active development, and may change
rapidly asthe project progresses. &lt;em&gt;(2022-05-16)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Depending on the wiki software, it may be possible to standardize these
notices as templates, as well as to search for pages with a particular
tag.&lt;/p&gt;
&lt;h3&gt;Categorization and hierarchy&lt;/h3&gt;
&lt;p&gt;MediaWiki supports filing articles into categories (&lt;em&gt;e.g.&lt;/em&gt;
https://en.wikipedia.org/wiki/Category:Coffee). Using this filing system
helps readers find articles related to the topic that they seek, even
though the pages may not directly link to each other.&lt;/p&gt;
&lt;p&gt;Categories are a many-to-many relationship (each page may be in multiple
categories), and categories can be nested.&lt;/p&gt;
&lt;p&gt;'Meta' categories that describe the state of a page can also be useful.&lt;/p&gt;
&lt;p&gt;Confluence offers poor support for page organization. Each page belongs
to a workspace and is either a root page in that workspace or belongs to
exactly one parent page. Parent pages should give an overview of the
topic but leave details to the child pages. Child pages can be used to
contain supplementary information that does not fit into the main text
of the parent.&lt;/p&gt;
</content><category term="Software"/><category term="documentation"/><category term="project-management"/></entry><entry><title>Are vegans vegetarians? and related questions</title><link href="https://jmft.dev/are-vegans-vegetarians.html" rel="alternate"/><published>2024-04-28T00:00:00+01:00</published><updated>2024-04-28T00:00:00+01:00</updated><author><name>J. M. F. Tsang</name></author><id>tag:jmft.dev,2024-04-28:/are-vegans-vegetarians.html</id><summary type="html">&lt;p&gt;I recently asked the following questions:&lt;/p&gt;
&lt;p&gt;Assuming all other requirements are the same:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is a vegan a vegetarian?&lt;/li&gt;
&lt;li&gt;Is a vegetarian a vegan?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To my (somewhat) surprise, this drew quite a lot of interest from
colleagues, friends, and even people on Facebook I hadn't talked to for
years, with lots …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently asked the following questions:&lt;/p&gt;
&lt;p&gt;Assuming all other requirements are the same:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is a vegan a vegetarian?&lt;/li&gt;
&lt;li&gt;Is a vegetarian a vegan?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To my (somewhat) surprise, this drew quite a lot of interest from
colleagues, friends, and even people on Facebook I hadn't talked to for
years, with lots of different ways on how to interpret the questions.&lt;/p&gt;
&lt;h2&gt;Restaurants&lt;/h2&gt;
&lt;p&gt;The next two questions were:&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;Is a vegan restaurant a vegetarian restaurant?&lt;/li&gt;
&lt;li&gt;Is a vegetarian restaurant a vegan restaurant?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Apples and labels&lt;/h2&gt;
&lt;p&gt;I asked two more questions:&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;Is a bag of apples a bag of fruit?&lt;/li&gt;
&lt;li&gt;Is a bag of apples that is labelled &amp;quot;Apples&amp;quot; a bag of fruit?&lt;/li&gt;
&lt;/ol&gt;
</content><category term="Software"/><category term="logic"/><category term="type-theory"/></entry><entry><title>Self-hosting a minimal website with nginx and HTTPS</title><link href="https://jmft.dev/setting-up-nginx-and-https.html" rel="alternate"/><published>2024-04-27T00:00:00+01:00</published><updated>2024-04-27T00:00:00+01:00</updated><author><name>J. M. F. Tsang</name></author><id>tag:jmft.dev,2024-04-27:/setting-up-nginx-and-https.html</id><summary type="html">&lt;p&gt;This website is now self-hosted on a Raspberry Pi server at home. I had
struggled with nginx and HTTPS in the past, so was rather pleasantly
surprised to see how straightforward it was.&lt;/p&gt;
&lt;p&gt;I couldn't find anything on the web that walked one through the whole
process, so here are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This website is now self-hosted on a Raspberry Pi server at home. I had
struggled with nginx and HTTPS in the past, so was rather pleasantly
surprised to see how straightforward it was.&lt;/p&gt;
&lt;p&gt;I couldn't find anything on the web that walked one through the whole
process, so here are the steps that I took, in some order. (This isn't
meant to be a full tutorial, sorry.)&lt;/p&gt;
&lt;p&gt;The site now serves static content using
&lt;a href="https://getpelican.com"&gt;Pelican&lt;/a&gt;. Much nicer than WordPress. More on
Pelican in a future post, but for now let us take it for granted that we
just want to serve static files in &lt;code&gt;/home/jmft2/jmft.dev/public_html&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;DNS and firewall&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add a suitable DNS record to your home network. I use
&lt;a href="https://noip.com"&gt;No-IP&lt;/a&gt; and then use an ALIAS record.&lt;/li&gt;
&lt;li&gt;Set up port forwarding on ports 80 and 443 on your firewall (in your
router settings).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Setting up nginx&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install nginx:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt install nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Create a minimal config file at &lt;code&gt;~/jmft.dev/nginx_config&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;server {
    server_name jmft.dev;

    access_log /home/jmft2/jmft.dev/logs/nginx-access.log;
    error_log /home/jmft2/jmft.dev/logs/nginx-error.log;

    location / {
        alias /home/jmft2/jmft.dev/public_html/;
        index index.html;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Make the directory for logs:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;mkdir ~/jmft.dev/logs
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Make symlinks to the &lt;code&gt;sites-available&lt;/code&gt; and &lt;code&gt;sites-enabled&lt;/code&gt; directories
in &lt;code&gt;/etc/nginx&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo ln -s ~/jmft.dev/nginx_config /etc/nginx/sites-available/jmft.dev
sudo ln -s /etc/nginx/sites-available/jmft.dev /etc/nginx/sites-enabled/jmft.dev
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Make sure the &lt;code&gt;public_html&lt;/code&gt; directory &lt;em&gt;and all its parents&lt;/em&gt; are
readable by the &lt;code&gt;www-data&lt;/code&gt; user. One way is this:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;chmod a+rX ~ ~/jmft.dev ~/jmft.dev/public_html
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Check the configuration, and if it is successful, load it:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo nginx -t &amp;amp;&amp;amp; sudo systemctl reload nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, going to &lt;code&gt;http://jmft.dev&lt;/code&gt; (no https) should show you the
&lt;code&gt;index.html&lt;/code&gt; page for the site.&lt;/p&gt;
&lt;h2&gt;Setting up HTTPS&lt;/h2&gt;
&lt;p&gt;LetsEncrypt recommend using &lt;a href="https://certbot.eff.org/"&gt;Certbot&lt;/a&gt;, which
made the HTTPS installation process very straightforward.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Certbot is managed by the Snap package manager, so it is first
necessary to install that:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo apt install snapd
sudo systemctl restart snapd  # might be needed
sudo snap install core
sudo snap install --classic certbot
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Run Certbot and follow the instructions:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo certbox --nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Reload the new nginx configurations:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo systemctl reload nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this set up, going to &lt;code&gt;https://jmft.dev&lt;/code&gt; should bring the site up.&lt;/p&gt;
</content><category term="Software"/><category term="backend"/><category term="nginx"/><category term="https"/></entry></feed>